using System.Collections.Generic;
using UnityEngine;

public class EnigmeGestion : MonoBehaviour
{
    public static EnigmeGestion Instance {get; private set;}
    
    private List<Enigme> enigmes= new List<Enigme>();
    public Enigme enigmeActuelle;

    void Awake()
    {
        if (Instance == null) Instance = this;
        else Destroy(gameObject);
        
        AddEnigmes();
    }

    private void AddEnigmes()
    {   
        // 0xx : Enigmes de fin de chapitre
        
        // 1xx : Enigmes ClassicText
        
        enigmes.Add(new T_ClassicText("Les chiffres de la porte", "Vous vous trouvez devant une lourde porte verrouill√©e, sans serrure apparente.\nSur le mur √† c√¥t√©, une plaque porte cette inscription :\n\n\"Mon premier est le double de mon second.\nMon troisi√®me est la somme de mon premier et de mon second.\nMon quatri√®me est la somme de mon deuxi√®me et de mon troisi√®me.\nAinsi de suite...\nLorsque mon cinqui√®me est diff√©rent de 7, pas la peine d'insister, la porte ne s'ouvrira pas.\"\n\nSous cette inscription, un pav√© num√©rique attend votre r√©ponse. Que devez-vous entrer pour ouvrir la porte ?", 101, "21347"));
        enigmes.Add(new T_ClassicText("Errance", "Un voyageur marche seul sur un sentier forestier lorsqu'il arrive √† une intersection avec trois panneaux indicateurs.\nChacun pointe vers un chemin diff√©rent et porte une inscription :\n\n 1 \"Ce chemin m√®ne √† la ville, mais seulement si l‚Äôun des deux autres panneaux dit vrai.\"\n 2 \"Ce chemin est le bon si et seulement si le premier panneau ment.\"\n 3 \"Ce chemin ne m√®ne nulle part.\"\n\nLe voyageur sait qu‚Äôun seul de ces panneaux dit la v√©rit√©, tandis que les deux autres mentent.\nQuel chemin doit-il prendre pour atteindre la ville ? Ecrivez le num√©ro du panneau qu'il devrait suivre.", 102, "2"));
        
        
        
        
        
        // 9xx : Enigmes de Test
        
        enigmes.Add(new T_TestType("Test d'UI", "Les explications sont une partie int√©grante de l'√©nigme. Comme leur nom l'indique c'est ici que le joueur pourra avoir toutes les informations qu'il lui faut pour r√©soudre l'√©nigme. \nConcr√®tement, dans le code, la classe <Enigme> prend en param√®tre un titre, des explications et un num√©ro et s'occupe automatiquement de tout bien placer dans les diff√©rents champs. \nLe texte est mis √† l'√©chelle automatiquement.\nVous remarquerez aussi la pr√©sence d'une partie Notes qui permet au joueur de prendre des notes manuscrites.", 900));
        enigmes.Add(new T_ClassicText("Test T_ClassicText", "Les √©nigmes les plus simples du point de vue du code mais plus complexes √† cr√©er sont celles-ci. Pour r√©pondre √† l'√©nigme il suffit d'entrer la r√©ponse dans la barre de texte.\nLe champ de r√©ponse devient violet lorsque la r√©ponse et fausse et vert lorsqu'elle est juste.\nIci, la r√©ponse est R√©ponse", 910, "R√©ponse"));
               
    }

    public void LoadEnigmes(int number)
    {
        enigmeActuelle = enigmes.Find(e => e.Number == number);
        
        if (enigmeActuelle != null)
        {
            Debug.Log($"üîç Chargement de l'√©nigme : {enigmeActuelle.Title}");
            EnigmeManager.Instance.LoadEnigme(enigmeActuelle.Explanations, enigmeActuelle.Number, enigmeActuelle.Title);
            
            enigmeActuelle.Initialize();
        }
        else
        {
            Debug.LogError($"‚ùå Aucune √©nigme trouv√©e avec le num√©ro {number}.");
        }
    }

    public void Check()
    {
        if (enigmeActuelle != null && enigmeActuelle.Check())
        {
            Debug.Log("Enigme r√©solue !");
        }
    }

}